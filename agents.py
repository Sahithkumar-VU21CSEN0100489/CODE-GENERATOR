# agents.py
# This file contains the logic for each individual AI agent.

import os
from dotenv import load_dotenv
import google.generativeai as genai

# --- Configuration ---
load_dotenv()
API_KEY = os.environ.get("GEMINI_API_KEY")

try:
    genai.configure(api_key=API_KEY)
except Exception as e:
    print(f"Error configuring Gemini API: {e}")
    # Fallback for environments where the key might be set via environment variables
    if not API_KEY and 'GEMINI_API_KEY' in os.environ:
        genai.configure(api_key=os.environ['GEMINI_API_KEY'])


# --- Agent Functions ---

def run_prompt_engineer(user_task: str) -> str:
    """
    Takes a user's task and generates a detailed, actionable prompt for the developer agent.
    
    Args:
        user_task: The high-level task description from the user.
        
    Returns:
        A detailed prompt string.
    """
    print("\nü§ñ Prompt Engineer Agent is running...")
    
    system_prompt = f"""
You are an expert Prompt Engineer AI. Your job is to take the following user's request and convert it into a detailed, unambiguous, and actionable prompt for a developer AI. The prompt must be directly and specifically about the user's request, and should not ignore, generalize, or change the intent of the user's input.

User Request: "{user_task}"

Generate a detailed prompt for a developer to implement exactly what the user asked for. Do not add unrelated information. Do not write any code yourself. If the user request is ambiguous, ask for clarification in the prompt.
"""
    
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(system_prompt)
        print("‚úÖ Prompt Engineer finished.")
        return response.text
    except Exception as e:
        print(f"Error during Prompt Engineer execution: {e}")
        return f"Error: Could not generate prompt. Details: {e}"


def run_developer(engineered_prompt: str) -> str:
    """
    Takes a detailed prompt and generates the corresponding code.
    
    Args:
        engineered_prompt: The detailed specification from the Prompt Engineer.
        
    Returns:
        A string containing the generated code.
    """
    print("\nüíª Developer Agent is running...")
    
    system_prompt = f"""
You are an expert Developer AI. Your only job is to write code based on the provided specification. Do not add explanations, apologies, or any text outside of the code itself. Only output the raw code.

Specification:
---
{engineered_prompt}
---

Generate the code now.
"""
    
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(system_prompt)
        # Clean up potential markdown fences
        code = response.text.replace("```python", "").replace("```", "").strip()
        print("‚úÖ Developer finished.")
        return code
    except Exception as e:
        print(f"Error during Developer execution: {e}")
        return f"# Error: Could not generate code. Details: {e}"


def run_code_reviewer(code_to_review: str) -> str:
    """
    Takes generated code and provides a quality assurance review.
    
    Args:
        code_to_review: The code generated by the Developer agent.
        
    Returns:
        A string containing the code review.
    """
    print("\nüîç Code Reviewer Agent is running...")
    
    system_prompt = f"""
You are an expert Code Reviewer AI. Your job is to analyze the provided code and give a brief, constructive review. Check for correctness, style, and potential issues. Start your review with a status (e.g., "STATUS: Approved").

Code to review:
---
{code_to_review}
---

Provide your review now.
"""
    
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(system_prompt)
        print("‚úÖ Code Reviewer finished.")
        return response.text
    except Exception as e:
        print(f"Error during Code Reviewer execution: {e}")
        return f"Error: Could not review code. Details: {e}"
